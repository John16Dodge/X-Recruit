import React, { useState } from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Map, BarChart3, List, Download, Eye } from 'lucide-react';
import MindMapVisualization from './MindMapVisualization';
import TimelineGraph from './TimelineGraph';

interface RoadmapStep {
  title: string;
  description: string;
  duration: string;
  resources: Array<{
    title: string;
    url: string;
    type: string;
  }>;
  tools: string[];
  category: string;
}

interface RoadmapVisualizerProps {
  roadmap: {
    title: string;
    description: string;
    difficulty: string;
    timeEstimate: string;
    steps: string[];
    resources: Array<{
      title: string;
      url: string;
      type: string;
      platform?: string;
    }>;
    tools: string[];
    platforms: string[];
    certifications: string[];
  };
}

const RoadmapVisualizer: React.FC<RoadmapVisualizerProps> = ({ roadmap }) => {
  const [activeTab, setActiveTab] = useState('mindmap');

  // Convert roadmap data to structured format
  const processRoadmapData = () => {
    const categories = ['foundation', 'core', 'advanced', 'specialization', 'project'];
    const stepsPerCategory = Math.ceil(roadmap.steps.length / categories.length);
    
    const nodes = roadmap.steps.map((step, index) => {
      const categoryIndex = Math.floor(index / stepsPerCategory);
      const category = categories[categoryIndex] || 'project';
      
      // Extract duration from step text or assign default
      const durationMatch = step.match(/(\d+)\s*(week|month|day)s?/i);
      let duration = '2 weeks'; // default
      
      if (durationMatch) {
        duration = durationMatch[0];
      } else {
        // Assign duration based on complexity and category
        const durations = {
          'foundation': '1-2 weeks',
          'core': '2-3 weeks',
          'advanced': '3-4 weeks',
          'specialization': '4-6 weeks',
          'project': '2-4 weeks'
        };
        duration = durations[category as keyof typeof durations] || '2 weeks';
      }

      return {
        id: `step-${index}`,
        title: step.split(':')[0] || step.substring(0, 30) + '...',
        duration,
        description: step,
        level: categoryIndex,
        category
      };
    });

    // Create links between sequential steps
    const links = nodes.slice(0, -1).map((_, index) => ({
      source: `step-${index}`,
      target: `step-${index + 1}`
    }));

    // Add some branching for advanced topics
    if (nodes.length > 6) {
      links.push({
        source: 'step-3',
        target: 'step-6'
      });
    }

    return { nodes, links };
  };

  // Convert to timeline data
  const getTimelineData = () => {
    const { nodes } = processRoadmapData();
    
    return nodes.map(node => ({
      name: node.title,
      duration: parseInt(node.duration.match(/(\d+)/)?.[1] || '2'),
      category: node.category,
      description: node.description
    }));
  };

  const { nodes, links } = processRoadmapData();
  const timelineData = getTimelineData();

  const downloadFullRoadmap = () => {
    const roadmapText = `
# ${roadmap.title} - Complete Learning Roadmap

## Overview
${roadmap.description}

**Difficulty:** ${roadmap.difficulty}
**Estimated Time:** ${roadmap.timeEstimate}

## Learning Path

${roadmap.steps.map((step, index) => `${index + 1}. ${step}`).join('\n')}

## Recommended Tools
${roadmap.tools.join(', ')}

## Learning Platforms
${roadmap.platforms.join(', ')}

## Certifications to Consider
${roadmap.certifications.map(cert => `- ${cert}`).join('\n')}

## Resources
${roadmap.resources.map(resource => `- ${resource.title} (${resource.type}) - ${resource.url}`).join('\n')}

Generated by X-Recruit Roadmap Generator
    `;

    const blob = new Blob([roadmapText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${roadmap.title.replace(/\s+/g, '_')}_roadmap.txt`;
    link.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex justify-between items-start">
            <div>
              <CardTitle className="text-2xl mb-2">{roadmap.title}</CardTitle>
              <p className="text-muted-foreground">{roadmap.description}</p>
              <div className="flex gap-2 mt-3">
                <Badge variant="secondary">{roadmap.difficulty}</Badge>
                <Badge variant="outline">{roadmap.timeEstimate}</Badge>
                <Badge variant="outline">{roadmap.steps.length} steps</Badge>
              </div>
            </div>
            <Button onClick={downloadFullRoadmap} variant="outline">
              <Download className="h-4 w-4 mr-2" />
              Download Roadmap
            </Button>
          </div>
        </CardHeader>
      </Card>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="mindmap" className="flex items-center gap-2">
            <Map className="h-4 w-4" />
            MindMap View
          </TabsTrigger>
          <TabsTrigger value="timeline" className="flex items-center gap-2">
            <BarChart3 className="h-4 w-4" />
            Timeline Graph
          </TabsTrigger>
          <TabsTrigger value="list" className="flex items-center gap-2">
            <List className="h-4 w-4" />
            Detailed List
          </TabsTrigger>
        </TabsList>

        <TabsContent value="mindmap" className="mt-6">
          <MindMapVisualization 
            nodes={nodes} 
            links={links} 
            title={roadmap.title}
          />
        </TabsContent>

        <TabsContent value="timeline" className="mt-6">
          <TimelineGraph 
            data={timelineData} 
            title={roadmap.title}
          />
        </TabsContent>

        <TabsContent value="list" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <List className="h-5 w-5" />
                Detailed Learning Steps
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {roadmap.steps.map((step, index) => {
                  const node = nodes[index];
                  return (
                    <div key={index} className="p-4 border rounded-lg hover:bg-gray-50 transition-colors">
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-semibold text-lg">Step {index + 1}: {node?.title || step.split(':')[0]}</h3>
                        <Badge variant="outline">{node?.duration || '2 weeks'}</Badge>
                      </div>
                      <p className="text-muted-foreground mb-3">{step}</p>
                      <div className="flex gap-2">
                        <Badge className={`${
                          node?.category === 'foundation' ? 'bg-blue-100 text-blue-800' :
                          node?.category === 'core' ? 'bg-purple-100 text-purple-800' :
                          node?.category === 'advanced' ? 'bg-red-100 text-red-800' :
                          node?.category === 'specialization' ? 'bg-green-100 text-green-800' :
                          'bg-yellow-100 text-yellow-800'
                        }`}>
                          {node?.category || 'core'}
                        </Badge>
                      </div>
                    </div>
                  );
                })}
              </div>
              
              <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <h4 className="font-semibold mb-3">Essential Tools</h4>
                  <div className="space-y-2">
                    {roadmap.tools.map((tool, index) => (
                      <Badge key={index} variant="secondary">{tool}</Badge>
                    ))}
                  </div>
                </div>
                
                <div>
                  <h4 className="font-semibold mb-3">Learning Platforms</h4>
                  <div className="space-y-2">
                    {roadmap.platforms.map((platform, index) => (
                      <Badge key={index} variant="outline">{platform}</Badge>
                    ))}
                  </div>
                </div>
                
                <div>
                  <h4 className="font-semibold mb-3">Certifications</h4>
                  <div className="space-y-2">
                    {roadmap.certifications.map((cert, index) => (
                      <Badge key={index} variant="secondary">{cert}</Badge>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default RoadmapVisualizer;